---
name: CI
permissions:
  contents: read
on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
  release:
    types: [created]    
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  github_env:
    name: GitHub Env Debug
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

  setup_release:
    name: Setup Release
    permissions:
      contents: write 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  build_win:
    name: Windows
    needs: setup_release
    permissions:
      contents: write # Add write permission for releases
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare tests
        id: prepare-tests
        if: false 
        run: |
          function DownloadAndExtract {
            param (
              [string]$Uri,
              [string]$OutFile
            )

            $maxRetries = 5
            $retryCount = 0
            $success = $false

            while (-not $success -and $retryCount -lt $maxRetries) {
              $retryCount++
              Write-Host "Downloading $Uri to $OutFile, attempt $retryCount of $maxRetries"
              try {
                Invoke-WebRequest -Uri $Uri -OutFile $OutFile
                $success = $true
              } catch {
                Write-Host "Attempt $retryCount of $maxRetries failed with error: $($_.Exception.Message). Retrying..."
                Start-Sleep -Seconds 5
              }
            }

            if (-not $success) {
              Write-Host "Failed to download the file after $maxRetries attempts."
              exit 1
            }

            $baseName = (Get-Item $OutFile).BaseName

            Expand-Archive -Path $OutFile -DestinationPath $baseName
          }

          DownloadAndExtract `
            -Uri "https://www.amyuni.com/downloads/usbmmidd_v2.zip" `
            -OutFile "usbmmidd_v2.zip"

          Set-Location -Path usbmmidd_v2/usbmmidd_v2
          ./deviceinstaller64 install usbmmidd.inf usbmmidd

          ./deviceinstaller64 enableidd 1

          Set-Location -Path ../..

          DownloadAndExtract `
            -Uri "https://github.com/Drawbackz/DevCon-Installer/releases/download/1.4-rc/Devcon.Installer.zip" `
            -OutFile "Devcon.Installer.zip"
          Set-Location -Path Devcon.Installer
          Start-Process -FilePath "./Devcon Installer.exe" -Wait -ArgumentList `
            'install', `
            '-hash', '54004C83EE34F6A55380528A8B29F4C400E61FBB947A19E0AB9E5A193D7D961E', `
            '-addpath', `
            '-update', `
            '-dir', 'C:\Windows\System32'

          C:\Windows\System32\devcon.exe disable "VMBUS\{da0a7802-e377-4aac-8e77-0558eb1073f8}"

          Set-Location -Path ..

          DownloadAndExtract `
            -Uri "http://www.nirsoft.net/utils/multimonitortool-x64.zip" `
            -OutFile "multimonitortool.zip"

          Set-Location -Path multimonitortool

          Start-Process powershell -Verb runAs -ArgumentList '-Command ./MultiMonitorTool.exe /enable \\.\DISPLAY2'
          Start-Process powershell -Verb runAs -ArgumentList '-Command ./MultiMonitorTool.exe /SetPrimary \\.\DISPLAY2'

          Start-Sleep -s 5

          ./MultiMonitorTool.exe /stext monitor_list.txt

          Start-Sleep -s 5

          Get-Content -Path monitor_list.txt

      - name: Setup Dependencies Windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja

      - name: Update core packages
        shell: msys2 {0}
        run: |
          pacman -Syuu --noconfirm

      - name: Install minimal dependencies
        shell: msys2 {0}
        run: |
          # Install only the essential packages first
          pacman -S --noconfirm \
            mingw-w64-ucrt-x86_64-gcc \
            mingw-w64-ucrt-x86_64-ninja \
            mingw-w64-ucrt-x86_64-cmake \
            mingw-w64-ucrt-x86_64-make \
            mingw-w64-ucrt-x86_64-toolchain

      - name: Install additional dependencies
        shell: msys2 {0}
        continue-on-error: true 
        run: |
          pacman -S --noconfirm \
            mingw-w64-ucrt-x86_64-cppwinrt \
            mingw-w64-ucrt-x86_64-curl-winssl \
            mingw-w64-ucrt-x86_64-MinHook \
            mingw-w64-ucrt-x86_64-miniupnpc \
            mingw-w64-ucrt-x86_64-nlohmann-json \
            mingw-w64-ucrt-x86_64-nodejs \
            mingw-w64-ucrt-x86_64-nsis \
            mingw-w64-ucrt-x86_64-onevpl \
            mingw-w64-ucrt-x86_64-openssl \
            mingw-w64-ucrt-x86_64-opus

      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Python Path 
        id: python-path
        shell: msys2 {0}
        run: |
          python_path=$(echo "${{ steps.setup-python.outputs.python-path }}" | sed 's/\\/\\\\/g')
          echo "python-path=${python_path}"
          echo "python-path=${python_path}" >> $GITHUB_OUTPUT

      - name: Build Windows
        shell: msys2 {0}
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}
          BUILD_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '1.0.0-dev' }}
          COMMIT: ${{ github.sha }}
        run: |
          mkdir -p build
          cmake \
            -B build \
            -G Ninja \
            -S . \
            -DBUILD_WERROR=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DAQUA_ASSETS_DIR=assets \
            -DAQUA_PUBLISHER_NAME='${{ github.repository_owner }}' \
            -DAQUA_PUBLISHER_WEBSITE='https://github.com/zeperix/AquaHost' \
            -DAQUA_PUBLISHER_ISSUE_URL='https://github.com/zeperix/AquaHost/issues'
          ninja -C build

      - name: Package Windows
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cd build

          # package
          cpack -G NSIS
          cpack -G ZIP

          # move
          mv ./cpack_artifacts/AquaHost.exe ../artifacts/AquaHost-installer.exe
          mv ./cpack_artifacts/AquaHost.zip ../artifacts/AquaHost-portable.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AquaHost
          path: artifacts/
          if-no-files-found: error

      - name: Create Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Explicitly set token
          tag_name: ${{ github.event.release.tag_name }}  # Use release tag
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/AquaHost-installer.exe
            artifacts/AquaHost-portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}